plugins {
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    // https://github.com/node-gradle/gradle-node-plugin
    id "com.github.node-gradle.node" version "7.0.1"
    id 'jacoco'
    id "org.sonarqube" version "4.4.1.3373"
}

configurations {
    asciidoctorExt
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation 'org.springframework.kafka:spring-kafka'
//    api 'com.github.kimj2su:jwt-auth:main-SNAPSHOT'
    //Jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'

    // rest docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'

    // test
    testRuntimeOnly 'com.h2database:h2'
    testImplementation 'io.rest-assured:rest-assured:5.3.1'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    implementation 'com.google.guava:guava:31.1-jre'
    testImplementation 'org.springframework.security:spring-security-test'

    // project
    implementation project(':data:domain')
    implementation project(':support')
}

// 배포시 문서를 포함하기 위한 설정
bootJar {
    archivesBaseName = "board"
    archiveFileName = "board.jar"
    archiveVersion = "0.0.1"

    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
    enabled = true
}

jar {
    enabled = false
}

// snippetsDir 경로를 위한 변수 설정
ext {
    set('snippetsDir', file("build/generated-snippets"))
}

test {
    outputs.dir snippetsDir
    finalizedBy jacocoTestReport
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'

    sources { // 특정 파일만 html로 만든다.
        include '**/index.adoc'
    }
    baseDirFollowsSourceDir() // 다른 adoc 파일을 include 할 때 경로를 baseDir로 맞춘다.
    dependsOn test
}

// 배포와 상관없이 로컬에서만 확인하기 위한 테스트
task copyDocument(type: Copy) {
    delete "src/main/resources/static/docs/"
    dependsOn asciidoctor

    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

sonar {
    properties {
        property "sonar.projectKey", ""
        property "sonar.projectName", "GitHub-Action-Sonar-Qube"
        property 'sonar.host.url', ''
        property 'sonar.token', ''
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
        property 'sonar.java.binaries', 'build/classes'
        property 'sonar.test.inclusions', '**/*Test.java'
        property 'sonar.exclusions', '**/test/**, **/ProjectBoardApplication.java, **/support/**, **/config/**, **/dto/**, **/resources/**'
    }
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestCoverageVerification {

    violationRules {
        rule {
            // 'element'가 없으면 프로젝트의 전체 파일을 합친 값을 기준으로 한다.
            // 위의 리포트에서 'Total'로 표시된 부분이다.
            element = 'CLASS'
            limit {
                // 'counter'를 지정하지 않으면 default는 'INSTRUCTION'
                // 'value'를 지정하지 않으면 default는 'COVEREDRATIO'
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.90
            }

            // 커버리지 체크를 제외할 클래스들
            excludes = [
                    // '*.test.*',
                    '*.ProjectBoardApplication*',
                    '*.support.*',
                    '*.config.*',
                    '*.dto.*'
            ]
        }
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.required.set(true)
    }
    // 리포트 작성 시 특정 파일 제외
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/ProjectBoardApplication.*',
                            '**/support/**',
                            '**/config/**',
                            '**/dto/**'
                    ])
                })
        )
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

//node {
//    // 프론트엔드 프로젝트 경로
//    nodeProjectDir = file("$projectDir/front")
//    version = '21.1.0'
//    download = true
//}
//
//task npmBuild(type: NpmTask) {
//    dependsOn npmInstall
//    args = ['run', 'build']
//}
//
//task copyFrontEnd(type: Copy) {
//    dependsOn npmBuild
//    from 'front/build'
//    into 'build/resources/main/static/.'
//}
//
//task cleanFrontEnd(type: Delete) {
//    delete "$projectDir/front/build", "$projectDir/front/node_modules"
//}
//
//npmBuild.dependsOn npmInstall
//copyFrontEnd.dependsOn npmBuild
//compileJava.dependsOn copyFrontEnd
//
//clean.dependsOn cleanFrontEnd
